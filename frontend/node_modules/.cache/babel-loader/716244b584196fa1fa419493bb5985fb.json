{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"name\", \"slot\", \"skipVariantsResolver\", \"skipSx\", \"overridesResolver\"];\n/* eslint-disable no-underscore-dangle */\n\nimport styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';\nimport { getDisplayName } from '@mui/utils';\nimport createTheme from './createTheme';\nimport propsToClassKey from './propsToClassKey';\nimport styleFunctionSx from './styleFunctionSx';\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n} // https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40\n\n\nfunction isStringTag(tag) {\n  return typeof tag === 'string' && // 96 is one less than the char code\n  // for \"a\" so this is checking that\n  // it's a lowercase character\n  tag.charCodeAt(0) > 96;\n}\n\nconst getStyleOverrides = (name, theme) => {\n  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {\n    return theme.components[name].styleOverrides;\n  }\n\n  return null;\n};\n\nconst getVariantStyles = (name, theme) => {\n  let variants = [];\n\n  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {\n    variants = theme.components[name].variants;\n  }\n\n  const variantsStyles = {};\n  variants.forEach(definition => {\n    const key = propsToClassKey(definition.props);\n    variantsStyles[key] = definition.style;\n  });\n  return variantsStyles;\n};\n\nconst variantsResolver = (props, styles, theme, name) => {\n  var _theme$components;\n\n  const {\n    ownerState = {}\n  } = props;\n  const variantsStyles = [];\n  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;\n\n  if (themeVariants) {\n    themeVariants.forEach(themeVariant => {\n      let isMatch = true;\n      Object.keys(themeVariant.props).forEach(key => {\n        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {\n          isMatch = false;\n        }\n      });\n\n      if (isMatch) {\n        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);\n      }\n    });\n  }\n\n  return variantsStyles;\n}; // Update /system/styled/#api in case if this changes\n\n\nexport function shouldForwardProp(prop) {\n  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';\n}\nexport const systemDefaultTheme = createTheme();\n\nconst lowercaseFirstLetter = string => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nfunction resolveTheme(_ref) {\n  let {\n    defaultTheme,\n    theme,\n    themeId\n  } = _ref;\n  return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;\n}\n\nexport default function createStyled() {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    themeId,\n    defaultTheme = systemDefaultTheme,\n    rootShouldForwardProp = shouldForwardProp,\n    slotShouldForwardProp = shouldForwardProp\n  } = input;\n\n  const systemSx = props => {\n    return styleFunctionSx(_extends({}, props, {\n      theme: resolveTheme(_extends({}, props, {\n        defaultTheme,\n        themeId\n      }))\n    }));\n  };\n\n  systemSx.__mui_systemSx = true;\n  return function (tag) {\n    let inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.\n    processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));\n\n    const {\n      name: componentName,\n      slot: componentSlot,\n      skipVariantsResolver: inputSkipVariantsResolver,\n      skipSx: inputSkipSx,\n      overridesResolver\n    } = inputOptions,\n          options = _objectWithoutPropertiesLoose(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.\n\n\n    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;\n    const skipSx = inputSkipSx || false;\n    let label;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (componentName) {\n        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;\n      }\n    }\n\n    let shouldForwardPropOption = shouldForwardProp;\n\n    if (componentSlot === 'Root') {\n      shouldForwardPropOption = rootShouldForwardProp;\n    } else if (componentSlot) {\n      // any other slot specified\n      shouldForwardPropOption = slotShouldForwardProp;\n    } else if (isStringTag(tag)) {\n      // for string (html) tag, preserve the behavior in emotion & styled-components.\n      shouldForwardPropOption = undefined;\n    }\n\n    const defaultStyledResolver = styledEngineStyled(tag, _extends({\n      shouldForwardProp: shouldForwardPropOption,\n      label\n    }, options));\n\n    const muiStyledResolver = function (styleArg) {\n      for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        expressions[_key - 1] = arguments[_key];\n      }\n\n      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {\n        // On the server Emotion doesn't use React.forwardRef for creating components, so the created\n        // component stays as a function. This condition makes sure that we do not interpolate functions\n        // which are basically components used as a selectors.\n        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? props => {\n          return stylesArg(_extends({}, props, {\n            theme: resolveTheme(_extends({}, props, {\n              defaultTheme,\n              themeId\n            }))\n          }));\n        } : stylesArg;\n      }) : [];\n      let transformedStyleArg = styleArg;\n\n      if (componentName && overridesResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }));\n          const styleOverrides = getStyleOverrides(componentName, theme);\n\n          if (styleOverrides) {\n            const resolvedStyleOverrides = {};\n            Object.entries(styleOverrides).forEach(_ref2 => {\n              let [slotKey, slotStyle] = _ref2;\n              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {\n                theme\n              })) : slotStyle;\n            });\n            return overridesResolver(props, resolvedStyleOverrides);\n          }\n\n          return null;\n        });\n      }\n\n      if (componentName && !skipVariantsResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }));\n          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);\n        });\n      }\n\n      if (!skipSx) {\n        expressionsWithDefaultTheme.push(systemSx);\n      }\n\n      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n\n      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.\n\n        transformedStyleArg = [...styleArg, ...placeholders];\n        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];\n      } else if (typeof styleArg === 'function' && // On the server Emotion doesn't use React.forwardRef for creating components, so the created\n      // component stays as a function. This condition makes sure that we do not interpolate functions\n      // which are basically components used as a selectors.\n      styleArg.__emotion_real !== styleArg) {\n        // If the type is function, we need to define the default theme.\n        transformedStyleArg = props => styleArg(_extends({}, props, {\n          theme: resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }))\n        }));\n      }\n\n      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);\n\n      if (process.env.NODE_ENV !== 'production') {\n        let displayName;\n\n        if (componentName) {\n          displayName = `${componentName}${componentSlot || ''}`;\n        }\n\n        if (displayName === undefined) {\n          displayName = `Styled(${getDisplayName(tag)})`;\n        }\n\n        Component.displayName = displayName;\n      }\n\n      if (tag.muiName) {\n        Component.muiName = tag.muiName;\n      }\n\n      return Component;\n    };\n\n    if (defaultStyledResolver.withConfig) {\n      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;\n    }\n\n    return muiStyledResolver;\n  };\n}","map":{"version":3,"sources":["/home/fpftech/fpf/vic/curso-react/react-integrando-apis/frontend/node_modules/@mui/system/esm/createStyled.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","styledEngineStyled","internal_processStyles","processStyles","getDisplayName","createTheme","propsToClassKey","styleFunctionSx","isEmpty","obj","Object","keys","length","isStringTag","tag","charCodeAt","getStyleOverrides","name","theme","components","styleOverrides","getVariantStyles","variants","variantsStyles","forEach","definition","key","props","style","variantsResolver","styles","_theme$components","ownerState","themeVariants","themeVariant","isMatch","push","shouldForwardProp","prop","systemDefaultTheme","lowercaseFirstLetter","string","charAt","toLowerCase","slice","resolveTheme","defaultTheme","themeId","createStyled","input","rootShouldForwardProp","slotShouldForwardProp","systemSx","__mui_systemSx","inputOptions","filter","componentName","slot","componentSlot","skipVariantsResolver","inputSkipVariantsResolver","skipSx","inputSkipSx","overridesResolver","options","undefined","label","process","env","NODE_ENV","shouldForwardPropOption","defaultStyledResolver","muiStyledResolver","styleArg","expressions","expressionsWithDefaultTheme","map","stylesArg","__emotion_real","transformedStyleArg","resolvedStyleOverrides","entries","slotKey","slotStyle","numOfCustomFnsApplied","Array","isArray","placeholders","fill","raw","Component","displayName","muiName","withConfig"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"name\", \"slot\", \"skipVariantsResolver\", \"skipSx\", \"overridesResolver\"];\n/* eslint-disable no-underscore-dangle */\nimport styledEngineStyled, { internal_processStyles as processStyles } from '@mui/styled-engine';\nimport { getDisplayName } from '@mui/utils';\nimport createTheme from './createTheme';\nimport propsToClassKey from './propsToClassKey';\nimport styleFunctionSx from './styleFunctionSx';\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40\nfunction isStringTag(tag) {\n  return typeof tag === 'string' &&\n  // 96 is one less than the char code\n  // for \"a\" so this is checking that\n  // it's a lowercase character\n  tag.charCodeAt(0) > 96;\n}\nconst getStyleOverrides = (name, theme) => {\n  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {\n    return theme.components[name].styleOverrides;\n  }\n  return null;\n};\nconst getVariantStyles = (name, theme) => {\n  let variants = [];\n  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {\n    variants = theme.components[name].variants;\n  }\n  const variantsStyles = {};\n  variants.forEach(definition => {\n    const key = propsToClassKey(definition.props);\n    variantsStyles[key] = definition.style;\n  });\n  return variantsStyles;\n};\nconst variantsResolver = (props, styles, theme, name) => {\n  var _theme$components;\n  const {\n    ownerState = {}\n  } = props;\n  const variantsStyles = [];\n  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;\n  if (themeVariants) {\n    themeVariants.forEach(themeVariant => {\n      let isMatch = true;\n      Object.keys(themeVariant.props).forEach(key => {\n        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {\n          isMatch = false;\n        }\n      });\n      if (isMatch) {\n        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);\n      }\n    });\n  }\n  return variantsStyles;\n};\n\n// Update /system/styled/#api in case if this changes\nexport function shouldForwardProp(prop) {\n  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';\n}\nexport const systemDefaultTheme = createTheme();\nconst lowercaseFirstLetter = string => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\nfunction resolveTheme({\n  defaultTheme,\n  theme,\n  themeId\n}) {\n  return isEmpty(theme) ? defaultTheme : theme[themeId] || theme;\n}\nexport default function createStyled(input = {}) {\n  const {\n    themeId,\n    defaultTheme = systemDefaultTheme,\n    rootShouldForwardProp = shouldForwardProp,\n    slotShouldForwardProp = shouldForwardProp\n  } = input;\n  const systemSx = props => {\n    return styleFunctionSx(_extends({}, props, {\n      theme: resolveTheme(_extends({}, props, {\n        defaultTheme,\n        themeId\n      }))\n    }));\n  };\n  systemSx.__mui_systemSx = true;\n  return (tag, inputOptions = {}) => {\n    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.\n    processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));\n    const {\n        name: componentName,\n        slot: componentSlot,\n        skipVariantsResolver: inputSkipVariantsResolver,\n        skipSx: inputSkipSx,\n        overridesResolver\n      } = inputOptions,\n      options = _objectWithoutPropertiesLoose(inputOptions, _excluded);\n\n    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.\n    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;\n    const skipSx = inputSkipSx || false;\n    let label;\n    if (process.env.NODE_ENV !== 'production') {\n      if (componentName) {\n        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;\n      }\n    }\n    let shouldForwardPropOption = shouldForwardProp;\n    if (componentSlot === 'Root') {\n      shouldForwardPropOption = rootShouldForwardProp;\n    } else if (componentSlot) {\n      // any other slot specified\n      shouldForwardPropOption = slotShouldForwardProp;\n    } else if (isStringTag(tag)) {\n      // for string (html) tag, preserve the behavior in emotion & styled-components.\n      shouldForwardPropOption = undefined;\n    }\n    const defaultStyledResolver = styledEngineStyled(tag, _extends({\n      shouldForwardProp: shouldForwardPropOption,\n      label\n    }, options));\n    const muiStyledResolver = (styleArg, ...expressions) => {\n      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {\n        // On the server Emotion doesn't use React.forwardRef for creating components, so the created\n        // component stays as a function. This condition makes sure that we do not interpolate functions\n        // which are basically components used as a selectors.\n        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? props => {\n          return stylesArg(_extends({}, props, {\n            theme: resolveTheme(_extends({}, props, {\n              defaultTheme,\n              themeId\n            }))\n          }));\n        } : stylesArg;\n      }) : [];\n      let transformedStyleArg = styleArg;\n      if (componentName && overridesResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }));\n          const styleOverrides = getStyleOverrides(componentName, theme);\n          if (styleOverrides) {\n            const resolvedStyleOverrides = {};\n            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {\n              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {\n                theme\n              })) : slotStyle;\n            });\n            return overridesResolver(props, resolvedStyleOverrides);\n          }\n          return null;\n        });\n      }\n      if (componentName && !skipVariantsResolver) {\n        expressionsWithDefaultTheme.push(props => {\n          const theme = resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }));\n          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);\n        });\n      }\n      if (!skipSx) {\n        expressionsWithDefaultTheme.push(systemSx);\n      }\n      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n        const placeholders = new Array(numOfCustomFnsApplied).fill('');\n        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.\n        transformedStyleArg = [...styleArg, ...placeholders];\n        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];\n      } else if (typeof styleArg === 'function' &&\n      // On the server Emotion doesn't use React.forwardRef for creating components, so the created\n      // component stays as a function. This condition makes sure that we do not interpolate functions\n      // which are basically components used as a selectors.\n      styleArg.__emotion_real !== styleArg) {\n        // If the type is function, we need to define the default theme.\n        transformedStyleArg = props => styleArg(_extends({}, props, {\n          theme: resolveTheme(_extends({}, props, {\n            defaultTheme,\n            themeId\n          }))\n        }));\n      }\n      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);\n      if (process.env.NODE_ENV !== 'production') {\n        let displayName;\n        if (componentName) {\n          displayName = `${componentName}${componentSlot || ''}`;\n        }\n        if (displayName === undefined) {\n          displayName = `Styled(${getDisplayName(tag)})`;\n        }\n        Component.displayName = displayName;\n      }\n      if (tag.muiName) {\n        Component.muiName = tag.muiName;\n      }\n      return Component;\n    };\n    if (defaultStyledResolver.withConfig) {\n      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;\n    }\n    return muiStyledResolver;\n  };\n}"]},"metadata":{},"sourceType":"module"}